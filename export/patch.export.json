{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "Y",
        "paramId": "MIDI+ENC/Y",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 90,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "X",
        "paramId": "MIDI+ENC/X",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "OSC1vol",
        "paramId": "MIDI+ENC/OSC1vol",
        "minimum": 0,
        "maximum": 35,
        "exponent": 1,
        "steps": 0,
        "initialValue": 98,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "OSC1offset",
        "paramId": "MIDI+ENC/OSC1offset",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -0.08,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "OSC1pan",
        "paramId": "MIDI+ENC/OSC1pan",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "OSC1wave",
        "paramId": "MIDI+ENC/OSC1wave",
        "minimum": 1,
        "maximum": 6,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "ratio1",
        "paramId": "MIDI+ENC/ratio1",
        "minimum": 0,
        "maximum": 7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.37,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "index1",
        "paramId": "MIDI+ENC/index1",
        "minimum": 0,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1.26,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "OSC2vol",
        "paramId": "MIDI+ENC/OSC2vol",
        "minimum": 0,
        "maximum": 150,
        "exponent": 1,
        "steps": 0,
        "initialValue": 43.7,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "OSC2offset",
        "paramId": "MIDI+ENC/OSC2offset",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "OSC2pan",
        "paramId": "MIDI+ENC/OSC2pan",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "OSC2wave",
        "paramId": "MIDI+ENC/OSC2wave",
        "minimum": 1,
        "maximum": 6,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "ratio2",
        "paramId": "MIDI+ENC/ratio2",
        "minimum": 0,
        "maximum": 7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.79,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "index2",
        "paramId": "MIDI+ENC/index2",
        "minimum": 0,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.97,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "OSC3vol",
        "paramId": "MIDI+ENC/OSC3vol",
        "minimum": 0,
        "maximum": 150,
        "exponent": 1,
        "steps": 0,
        "initialValue": 36,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "OSC3offset",
        "paramId": "MIDI+ENC/OSC3offset",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.04,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "OSC3pan",
        "paramId": "MIDI+ENC/OSC3pan",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "OSC3wave",
        "paramId": "MIDI+ENC/OSC3wave",
        "minimum": 1,
        "maximum": 6,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "ratio3",
        "paramId": "MIDI+ENC/ratio3",
        "minimum": 0,
        "maximum": 7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1.79,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "index3",
        "paramId": "MIDI+ENC/index3",
        "minimum": 0,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.47,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "VOL",
        "paramId": "MIDI+ENC/VOL",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 14,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "BPM",
        "paramId": "MIDI+ENC/BPM",
        "minimum": 40,
        "maximum": 400,
        "exponent": 1,
        "steps": 0,
        "initialValue": 40,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "oddsTRIG",
        "paramId": "MIDI+ENC/oddsTRIG",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 7,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "spreadNOTEZ",
        "paramId": "MIDI+ENC/spreadNOTEZ",
        "minimum": 0,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "offset",
        "paramId": "MIDI+ENC/offset",
        "minimum": -24,
        "maximum": 24,
        "exponent": 1,
        "steps": 0,
        "initialValue": 2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "detune",
        "paramId": "MIDI+ENC/detune",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "CUTOFF",
        "paramId": "MIDI+ENC/CUTOFF",
        "minimum": 0,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 27,
        "name": "resonance",
        "paramId": "MIDI+ENC/resonance",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 28,
        "name": "attack",
        "paramId": "MIDI+ENC/attack",
        "minimum": 0,
        "maximum": 6000,
        "exponent": 3,
        "steps": 0,
        "initialValue": 5500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 29,
        "name": "decay",
        "paramId": "MIDI+ENC/decay",
        "minimum": 1,
        "maximum": 6000,
        "exponent": 4,
        "steps": 0,
        "initialValue": 6000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 30,
        "name": "sustain",
        "paramId": "MIDI+ENC/sustain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 0.8,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 31,
        "name": "release",
        "paramId": "MIDI+ENC/release",
        "minimum": 1,
        "maximum": 10000,
        "exponent": 4,
        "steps": 0,
        "initialValue": 5500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 32,
        "name": "attackFM",
        "paramId": "MIDI+ENC/attackFM",
        "minimum": 0,
        "maximum": 6000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 6000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 33,
        "name": "decayFM",
        "paramId": "MIDI+ENC/decayFM",
        "minimum": 1,
        "maximum": 6000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 5500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 34,
        "name": "sustainFM",
        "paramId": "MIDI+ENC/sustainFM",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 35,
        "name": "releaseFM",
        "paramId": "MIDI+ENC/releaseFM",
        "minimum": 1,
        "maximum": 6000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 5000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 36,
        "name": "attackCUT",
        "paramId": "MIDI+ENC/attackCUT",
        "minimum": 0,
        "maximum": 6000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 6000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 37,
        "name": "decayCUT",
        "paramId": "MIDI+ENC/decayCUT",
        "minimum": 1,
        "maximum": 6000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 38,
        "name": "sustainCUT",
        "paramId": "MIDI+ENC/sustainCUT",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 39,
        "name": "releaseCUT",
        "paramId": "MIDI+ENC/releaseCUT",
        "minimum": 1,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 5500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 40,
        "name": "rateE",
        "paramId": "MIDI+ENC/rateE",
        "minimum": 0,
        "maximum": 250,
        "exponent": 1,
        "steps": 0,
        "initialValue": 3,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 41,
        "name": "colorTonePHASER",
        "paramId": "MIDI+ENC/colorTonePHASER",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Color",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 42,
        "name": "feedbackFLANGE",
        "paramId": "MIDI+ENC/feedbackFLANGE",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Color",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 43,
        "name": "colorLES",
        "paramId": "MIDI+ENC/colorLES",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Color",
        "unit": "%",
        "order": 12,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 44,
        "name": "depthCHOR",
        "paramId": "MIDI+ENC/depthCHOR",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 60,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Depth",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 45,
        "name": "depthVIB",
        "paramId": "MIDI+ENC/depthVIB",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 46,
        "name": "depthFL",
        "paramId": "MIDI+ENC/depthFL",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Depth",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 47,
        "name": "depthPH",
        "paramId": "MIDI+ENC/depthPH",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Depth",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 48,
        "name": "freezeMIX",
        "paramId": "MIDI+ENC/freezeMIX",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 49,
        "name": "transp",
        "paramId": "MIDI+ENC/transp",
        "minimum": -12,
        "maximum": 12,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Transp",
        "unit": "st",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 50,
        "name": "spectralTIME",
        "paramId": "MIDI+ENC/spectralTIME",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1647,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 51,
        "name": "smooth",
        "paramId": "MIDI+ENC/smooth",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 33,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Fade",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 52,
        "name": "PWm",
        "paramId": "MIDI+ENC/PWm",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 53,
        "name": "mixLES",
        "paramId": "MIDI+ENC/mixLES",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 54,
        "name": "CUTOFFLFO",
        "paramId": "MIDI+ENC/CUTOFFLFO",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 55,
        "name": "spectralLFO",
        "paramId": "MIDI+ENC/spectralLFO",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 56,
        "name": "DISmix",
        "paramId": "MIDI+ENC/DISmix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 57,
        "name": "DISTeq_PRE",
        "paramId": "MIDI+ENC/DISTeq_PRE",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 58,
        "name": "DISmid",
        "paramId": "MIDI+ENC/DISmid",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -0.2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mid",
        "unit": "%",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 59,
        "name": "DISTeq_IN",
        "paramId": "MIDI+ENC/DISTeq_IN",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -0.4,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 60,
        "name": "VERBmix",
        "paramId": "MIDI+ENC/VERBmix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mic",
        "unit": "%",
        "order": 15,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 61,
        "name": "verbTIME",
        "paramId": "MIDI+ENC/verbTIME",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 80,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 62,
        "name": "VERBpitch",
        "paramId": "MIDI+ENC/VERBpitch",
        "minimum": -12,
        "maximum": 12,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Pitch",
        "unit": "st",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 63,
        "name": "octvol",
        "paramId": "MIDI+ENC/octvol",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "OctVol",
        "unit": "%",
        "order": 13,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 64,
        "name": "DELmix",
        "paramId": "MIDI+ENC/DELmix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 10,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 65,
        "name": "DELregen",
        "paramId": "MIDI+ENC/DELregen",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Regen",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 66,
        "name": "DELindex",
        "paramId": "MIDI+ENC/DELindex",
        "minimum": 0,
        "maximum": 16,
        "exponent": 1,
        "steps": 0,
        "initialValue": 4,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 67,
        "name": "DELspread",
        "paramId": "MIDI+ENC/DELspread",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 68,
        "name": "ARCADE_TRIG",
        "paramId": "MIDI+ENC/TRIG_in/ARCADE_TRIG",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 69,
        "name": "windowSIZE",
        "paramId": "SPECTEREERLALL/windowSIZE",
        "minimum": 0,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 200,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 70,
        "name": "DISlowcut",
        "paramId": "DISTORTION/DISlowcut",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "LowCut",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 71,
        "name": "DIShighcut",
        "paramId": "DISTORTION/DIShighcut",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 80,
        "isEnum": false,
        "enumValues": [],
        "displayName": "HighCut",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 72,
        "name": "DISdrive",
        "paramId": "DISTORTION/DISdrive",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "Drive",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 73,
        "name": "DISvol",
        "paramId": "DISTORTION/DISvol",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Volume",
        "unit": "%",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 74,
        "name": "DISbass",
        "paramId": "DISTORTION/DISbass",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": -20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Bass",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 75,
        "name": "DISmidfreq",
        "paramId": "DISTORTION/DISmidfreq",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 55,
        "isEnum": false,
        "enumValues": [],
        "displayName": "MidFreq",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 76,
        "name": "DIStreble",
        "paramId": "DISTORTION/DIStreble",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Treble",
        "unit": "%",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 77,
        "name": "spreadFL",
        "paramId": "flanger/spreadFL",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 78,
        "name": "spreadCHOR",
        "paramId": "chorus/spreadCHOR",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 79,
        "name": "spreadVIB",
        "paramId": "vibrato/spreadVIB",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 80,
        "name": "octdamp",
        "paramId": "VERB/octdamp",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "OctDamp",
        "unit": "%",
        "order": 14,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 81,
        "name": "revvol",
        "paramId": "VERB/revvol",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "RevVol",
        "unit": "%",
        "order": 11,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 82,
        "name": "damp",
        "paramId": "VERB/damp",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Damp",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 83,
        "name": "pitchvol",
        "paramId": "VERB/pitchvol",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "PitchVol",
        "unit": "%",
        "order": 12,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 84,
        "name": "decay",
        "paramId": "VERB/decay",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 85,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Decay",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 85,
        "name": "jitter",
        "paramId": "VERB/jitter",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 80,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Jitter",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 86,
        "name": "size",
        "paramId": "VERB/size",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 95,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Size",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 87,
        "name": "diff",
        "paramId": "VERB/diff",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Diff",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 88,
        "name": "chorus",
        "paramId": "VERB/chorus",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Chorus",
        "unit": "%",
        "order": 10,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 89,
        "name": "feedback",
        "paramId": "VERB/feedback",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 39,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Feedback",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 90,
        "name": "window",
        "paramId": "VERB/window",
        "minimum": 0,
        "maximum": 300,
        "exponent": 1,
        "steps": 0,
        "initialValue": 250,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 91,
        "name": "delay",
        "paramId": "VERB/delay",
        "minimum": 0,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 250,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Delay",
        "unit": "ms",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 92,
        "name": "rand",
        "paramId": "delayy/DelayCalc/rand",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 93,
        "name": "genTOG",
        "paramId": "GENtog_in/genTOG",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 94,
        "name": "1_BMO_v1",
        "paramId": "presets/BMO_v1/1_BMO_v1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 95,
        "name": "CLEAR",
        "paramId": "CLEAR_in/CLEAR",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 96,
        "name": "glitchh",
        "paramId": "GLITCH_in/glitchh",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 97,
        "name": "ARCADE_TRIG",
        "paramId": "TRIG_in/ARCADE_TRIG",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      }
    ],
    "numParameters": 98,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "transportUsed": true,
    "externalDataRefs": [
      {
        "id": "FreezeA",
        "type": "Float64Buffer",
        "tag": "data"
      },
      {
        "id": "FreezeB",
        "type": "Float64Buffer",
        "tag": "data"
      }
    ],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "tap-mult",
        "meta": ""
      },
      {
        "tag": "rate-ms",
        "meta": ""
      }
    ],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55[0].getNumParameters()) {\n            {\n                return this.p_55[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_55[0].getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_58.getNumParameters();\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_59.getNumParameters();\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_60.getNumParameters();\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_61.getNumParameters();\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68[0].getNumParameters()) {\n            {\n                return this.p_68[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_68[0].getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55[0].getNumParameters()) {\n            {\n                return this.p_55[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_55[0].getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_58.getNumParameters();\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_59.getNumParameters();\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_60.getNumParameters();\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_61.getNumParameters();\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68[0].getNumParameters()) {\n            {\n                return this.p_68[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_68[0].getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_54.getNumParameters() + this.p_55[0].getNumParameters() + this.p_56.getNumParameters() + this.p_57.getNumParameters() + this.p_58.getNumParameters() + this.p_59.getNumParameters() + this.p_60.getNumParameters() + this.p_61.getNumParameters() + this.p_62.getNumParameters() + this.p_63.getNumParameters() + this.p_64.getNumParameters() + this.p_65.getNumParameters() + this.p_66.getNumParameters() + this.p_67.getNumParameters() + this.p_68[0].getNumParameters() + this.p_69.getNumParameters() + this.p_70.getNumParameters() + this.p_71.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.constrainParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55[0].getNumParameters()) {\n            {\n                return this.p_55[0].constrainParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_55[0].getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.constrainParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.constrainParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.constrainParameterValue(index, value);\n\n        index -= this.p_58.getNumParameters();\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.constrainParameterValue(index, value);\n\n        index -= this.p_59.getNumParameters();\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.constrainParameterValue(index, value);\n\n        index -= this.p_60.getNumParameters();\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.constrainParameterValue(index, value);\n\n        index -= this.p_61.getNumParameters();\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.constrainParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.constrainParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.constrainParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.constrainParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.constrainParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.constrainParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68[0].getNumParameters()) {\n            {\n                return this.p_68[0].constrainParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_68[0].getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.constrainParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.constrainParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_54": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 27:\n    case 34:\n    case 38:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 30:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                if (normalizedValue != 0.0) {\n                    normalizedValue = rnbo_exp(\n                        rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / 0.8\n                    );\n                }\n            }\n\n            return normalizedValue;\n        }\n    case 6:\n    case 12:\n    case 18:\n        {\n            value = (value < 0 ? 0 : (value > 7 ? 7 : value));\n            let normalizedValue = (value - 0) / (7 - 0);\n            return normalizedValue;\n        }\n    case 7:\n    case 13:\n    case 19:\n    case 23:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n            return normalizedValue;\n        }\n    case 66:\n        {\n            value = (value < 0 ? 0 : (value > 16 ? 16 : value));\n            let normalizedValue = (value - 0) / (16 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 35 ? 35 : value));\n            let normalizedValue = (value - 0) / (35 - 0);\n            return normalizedValue;\n        }\n    case 20:\n    case 22:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n    case 48:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 60:\n    case 61:\n    case 63:\n    case 64:\n    case 65:\n    case 67:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 127 ? 127 : value));\n            let normalizedValue = (value - 0) / (127 - 0);\n            return normalizedValue;\n        }\n    case 8:\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 150 ? 150 : value));\n            let normalizedValue = (value - 0) / (150 - 0);\n            return normalizedValue;\n        }\n    case 40:\n        {\n            value = (value < 0 ? 0 : (value > 250 ? 250 : value));\n            let normalizedValue = (value - 0) / (250 - 0);\n            return normalizedValue;\n        }\n    case 32:\n    case 36:\n        {\n            value = (value < 0 ? 0 : (value > 6000 ? 6000 : value));\n            let normalizedValue = (value - 0) / (6000 - 0);\n            return normalizedValue;\n        }\n    case 28:\n        {\n            value = (value < 0 ? 0 : (value > 6000 ? 6000 : value));\n            let normalizedValue = (value - 0) / (6000 - 0);\n\n            {\n                if (normalizedValue != 0.0) {\n                    normalizedValue = rnbo_exp(\n                        rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / 3\n                    );\n                }\n            }\n\n            return normalizedValue;\n        }\n    case 50:\n        {\n            value = (value < 0 ? 0 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 0) / (10000 - 0);\n            return normalizedValue;\n        }\n    case 26:\n        {\n            value = (value < 0 ? 0 : (value > 20000 ? 20000 : value));\n            let normalizedValue = (value - 0) / (20000 - 0);\n            return normalizedValue;\n        }\n    case 5:\n    case 11:\n    case 17:\n        {\n            value = (value < 1 ? 1 : (value > 6 ? 6 : value));\n            let normalizedValue = (value - 1) / (6 - 1);\n            return normalizedValue;\n        }\n    case 33:\n    case 35:\n    case 37:\n        {\n            value = (value < 1 ? 1 : (value > 6000 ? 6000 : value));\n            let normalizedValue = (value - 1) / (6000 - 1);\n            return normalizedValue;\n        }\n    case 29:\n        {\n            value = (value < 1 ? 1 : (value > 6000 ? 6000 : value));\n            let normalizedValue = (value - 1) / (6000 - 1);\n\n            {\n                if (normalizedValue != 0.0) {\n                    normalizedValue = rnbo_exp(\n                        rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / 4\n                    );\n                }\n            }\n\n            return normalizedValue;\n        }\n    case 39:\n        {\n            value = (value < 1 ? 1 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 1) / (10000 - 1);\n            return normalizedValue;\n        }\n    case 31:\n        {\n            value = (value < 1 ? 1 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 1) / (10000 - 1);\n\n            {\n                if (normalizedValue != 0.0) {\n                    normalizedValue = rnbo_exp(\n                        rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / 4\n                    );\n                }\n            }\n\n            return normalizedValue;\n        }\n    case 21:\n        {\n            value = (value < 40 ? 40 : (value > 400 ? 400 : value));\n            let normalizedValue = (value - 40) / (400 - 40);\n            return normalizedValue;\n        }\n    case 3:\n    case 4:\n    case 9:\n    case 10:\n    case 15:\n    case 16:\n    case 25:\n    case 57:\n    case 58:\n    case 59:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    case 24:\n        {\n            value = (value < -24 ? -24 : (value > 24 ? 24 : value));\n            let normalizedValue = (value - -24) / (24 - -24);\n            return normalizedValue;\n        }\n    case 49:\n    case 62:\n        {\n            value = (value < -12 ? -12 : (value > 12 ? 12 : value));\n            let normalizedValue = (value - -12) / (12 - -12);\n            return normalizedValue;\n        }\n    default:\n        index -= 68;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 27:\n    case 34:\n    case 38:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 30:\n        {\n            {\n                if (value == 0.0) {\n                    return 0;\n                } else {\n                    return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 0.8) * (1 - 0);\n                }\n            }\n        }\n    case 6:\n    case 12:\n    case 18:\n        {\n            {\n                return 0 + value * (7 - 0);\n            }\n        }\n    case 7:\n    case 13:\n    case 19:\n    case 23:\n        {\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 66:\n        {\n            {\n                return 0 + value * (16 - 0);\n            }\n        }\n    case 2:\n        {\n            {\n                return 0 + value * (35 - 0);\n            }\n        }\n    case 20:\n    case 22:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n    case 48:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 60:\n    case 61:\n    case 63:\n    case 64:\n    case 65:\n    case 67:\n        {\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 0:\n    case 1:\n        {\n            {\n                return 0 + value * (127 - 0);\n            }\n        }\n    case 8:\n    case 14:\n        {\n            {\n                return 0 + value * (150 - 0);\n            }\n        }\n    case 40:\n        {\n            {\n                return 0 + value * (250 - 0);\n            }\n        }\n    case 32:\n    case 36:\n        {\n            {\n                return 0 + value * (6000 - 0);\n            }\n        }\n    case 28:\n        {\n            {\n                if (value == 0.0) {\n                    return 0;\n                } else {\n                    return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (6000 - 0);\n                }\n            }\n        }\n    case 50:\n        {\n            {\n                return 0 + value * (10000 - 0);\n            }\n        }\n    case 26:\n        {\n            {\n                return 0 + value * (20000 - 0);\n            }\n        }\n    case 5:\n    case 11:\n    case 17:\n        {\n            {\n                return 1 + value * (6 - 1);\n            }\n        }\n    case 33:\n    case 35:\n    case 37:\n        {\n            {\n                return 1 + value * (6000 - 1);\n            }\n        }\n    case 29:\n        {\n            {\n                if (value == 0.0) {\n                    return 1;\n                } else {\n                    return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 4) * (6000 - 1);\n                }\n            }\n        }\n    case 39:\n        {\n            {\n                return 1 + value * (10000 - 1);\n            }\n        }\n    case 31:\n        {\n            {\n                if (value == 0.0) {\n                    return 1;\n                } else {\n                    return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 4) * (10000 - 1);\n                }\n            }\n        }\n    case 21:\n        {\n            {\n                return 40 + value * (400 - 40);\n            }\n        }\n    case 3:\n    case 4:\n    case 9:\n    case 10:\n    case 15:\n    case 16:\n    case 25:\n    case 57:\n    case 58:\n    case 59:\n        {\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    case 24:\n        {\n            {\n                return -24 + value * (24 - -24);\n            }\n        }\n    case 49:\n    case 62:\n        {\n            {\n                return -12 + value * (12 - -12);\n            }\n        }\n    default:\n        index -= 68;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 68 + this.p_01.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 35 ? 35 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 6 ? 6 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 7 ? 7 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 150 ? 150 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 6 ? 6 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 12:\n        {\n            v = (v > 7 ? 7 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 13:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 14:\n        {\n            v = (v > 150 ? 150 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 15:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 16:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 17:\n        {\n            v = (v > 6 ? 6 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 18:\n        {\n            v = (v > 7 ? 7 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 19:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 20:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 21:\n        {\n            v = (v > 400 ? 400 : (v < 40 ? 40 : v));\n            return v;\n        }\n    case 22:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 23:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 24:\n        {\n            v = (v > 24 ? 24 : (v < -24 ? -24 : v));\n            return v;\n        }\n    case 25:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 26:\n        {\n            v = (v > 20000 ? 20000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 27:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 28:\n        {\n            v = (v > 6000 ? 6000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 29:\n        {\n            v = (v > 6000 ? 6000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 30:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 31:\n        {\n            v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 32:\n        {\n            v = (v > 6000 ? 6000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 33:\n        {\n            v = (v > 6000 ? 6000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 34:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 35:\n        {\n            v = (v > 6000 ? 6000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 36:\n        {\n            v = (v > 6000 ? 6000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 37:\n        {\n            v = (v > 6000 ? 6000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 38:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 39:\n        {\n            v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 40:\n        {\n            v = (v > 250 ? 250 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 41:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 42:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 43:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 44:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 45:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 46:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 47:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 48:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 49:\n        {\n            v = (v > 12 ? 12 : (v < -12 ? -12 : v));\n            return v;\n        }\n    case 50:\n        {\n            v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 51:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 52:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 53:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 54:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 55:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 56:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 57:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 58:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 59:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 60:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 61:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 62:\n        {\n            v = (v > 12 ? 12 : (v < -12 ? -12 : v));\n            return v;\n        }\n    case 63:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 64:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 65:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 66:\n        {\n            v = (v > 16 ? 16 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 67:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 68;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_01": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_55": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters() + this.p_10.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_06": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_02.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_02": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_07": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_03.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_03": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_08": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_04.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_09": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_10": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_05.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": true
        },
        "p_56": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1000 ? 1000 : value));\n            let normalizedValue = (value - 0) / (1000 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12[0].getNumParameters()) {\n            {\n                return this.p_12[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_12[0].getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14[0].getNumParameters()) {\n            {\n                return this.p_14[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1000 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12[0].getNumParameters()) {\n            {\n                return this.p_12[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_12[0].getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14[0].getNumParameters()) {\n            {\n                return this.p_14[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_11.getNumParameters() + this.p_12[0].getNumParameters() + this.p_13.getNumParameters() + this.p_14[0].getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1000 ? 1000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12[0].getNumParameters()) {\n            {\n                return this.p_12[0].constrainParameterValue(index, value);\n            }\n        }\n\n        index -= this.p_12[0].getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14[0].getNumParameters()) {\n            {\n                return this.p_14[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_11": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_12": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": true
            },
            "p_13": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_14": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": true
            }
          },
          "isPolyphonic": false
        },
        "p_57": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n        {\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - -100) / (100 - -100);\n            return normalizedValue;\n        }\n    default:\n        index -= 7;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n        {\n            {\n                return -100 + value * (100 - -100);\n            }\n        }\n    default:\n        index -= 7;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 7 + this.p_18.getNumParameters() + this.p_19.getNumParameters() + this.p_20.getNumParameters() + this.p_21.getNumParameters() + this.p_22.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    default:\n        index -= 7;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_18": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_15.getNumParameters() + this.p_16.getNumParameters() + this.p_17.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_15": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_16": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_22": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_58": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_23.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_23": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_59": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_24.getNumParameters() + this.p_25.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_24": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_25": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_60": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_61": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_62": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 300 ? 300 : value));\n            let normalizedValue = (value - 0) / (300 - 0);\n            return normalizedValue;\n        }\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 1000 ? 1000 : value));\n            let normalizedValue = (value - 0) / (1000 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - -100) / (100 - -100);\n            return normalizedValue;\n        }\n    default:\n        index -= 12;\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_44.getNumParameters();\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n        {\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 10:\n        {\n            {\n                return 0 + value * (300 - 0);\n            }\n        }\n    case 11:\n        {\n            {\n                return 0 + value * (1000 - 0);\n            }\n        }\n    case 3:\n        {\n            {\n                return -100 + value * (100 - -100);\n            }\n        }\n    default:\n        index -= 12;\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_44.getNumParameters();\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 12 + this.p_39.getNumParameters() + this.p_40.getNumParameters() + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters() + this.p_44.getNumParameters() + this.p_45.getNumParameters() + this.p_46.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 300 ? 300 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 1000 ? 1000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 12;\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.constrainParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.constrainParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.constrainParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.constrainParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.constrainParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.constrainParameterValue(index, value);\n\n        index -= this.p_44.getNumParameters();\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.constrainParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_39": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_26.getNumParameters() + this.p_27.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_26": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_27": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_40": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_41": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_42": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_28.getNumParameters() + this.p_29.getNumParameters() + this.p_30.getNumParameters() + this.p_31.getNumParameters() + this.p_32.getNumParameters() + this.p_33.getNumParameters() + this.p_34.getNumParameters() + this.p_35.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.constrainParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.constrainParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.constrainParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.constrainParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.constrainParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.constrainParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_28": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_29": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_30": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_31": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_32": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_33": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_34": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_35": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_43": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_36.getNumParameters() + this.p_37.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.constrainParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_36": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_37": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_44": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_45": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_38.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_38": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_46": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_63": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_47.getNumParameters() + this.p_48.getNumParameters() + this.p_49.getNumParameters() + this.p_50.getNumParameters() + this.p_51.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.constrainParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.constrainParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.constrainParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.constrainParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_47": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_48": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_49": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_50": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_51": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_64": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_65": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_52.getNumParameters() + this.p_53.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.constrainParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_52": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_53": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_66": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_67": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_68": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": true
        },
        "p_69": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_70": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_71": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "bmo_v1.maxpat",
      "rnboobjname": "rnbomatic",
      "maxversion": "9.0.0",
      "rnboversion": "1.3.3",
      "name": "untitled"
    }
  },
  "presets": [
    {
      "name": "1.SLEEP",
      "preset": {
        "__sps": {
          "CLEAR_in": {
            "CLEAR": {
              "value": 0
            }
          },
          "DISTORTION": {
            "DISbass": {
              "value": -20
            },
            "DISdrive": {
              "value": 100
            },
            "DIShighcut": {
              "value": 80
            },
            "DISlowcut": {
              "value": 0
            },
            "DISmidfreq": {
              "value": 55
            },
            "DIStreble": {
              "value": 0
            },
            "DISvol": {
              "value": 0
            },
            "__sps": {
              "Drive~": {},
              "Mix~": {},
              "Post-EQ~": {
                "__sps": {
                  "Bass~": {},
                  "Mid~": {},
                  "Treble~": {}
                }
              },
              "Pre-EQ~": {},
              "Volume~": {}
            }
          },
          "FILTER": {},
          "GENtog_in": {
            "genTOG": {
              "value": 1
            }
          },
          "GLITCH_in": {
            "glitchh": {
              "value": 0
            }
          },
          "LFO~": {},
          "MIDI+ENC": {
            "BPM": {
              "value": 306
            },
            "CUTOFF": {
              "value": 20000
            },
            "CUTOFFLFO": {
              "value": 0
            },
            "DELindex": {
              "value": 0
            },
            "DELmix": {
              "value": 0
            },
            "DELregen": {
              "value": 0
            },
            "DELspread": {
              "value": 0
            },
            "DISTeq_IN": {
              "value": 0
            },
            "DISTeq_PRE": {
              "value": 0
            },
            "DISmid": {
              "value": 0
            },
            "DISmix": {
              "value": 0.4
            },
            "OSC1offset": {
              "value": -0.08
            },
            "OSC1pan": {
              "value": -1
            },
            "OSC1vol": {
              "value": 35
            },
            "OSC1wave": {
              "value": 1
            },
            "OSC2offset": {
              "value": 0
            },
            "OSC2pan": {
              "value": 0
            },
            "OSC2vol": {
              "value": 43.70078740157479
            },
            "OSC2wave": {
              "value": 1
            },
            "OSC3offset": {
              "value": 0.04
            },
            "OSC3pan": {
              "value": 0
            },
            "OSC3vol": {
              "value": 38.97637795275589
            },
            "OSC3wave": {
              "value": 1
            },
            "PWm": {
              "value": 0
            },
            "VERBmix": {
              "value": 0
            },
            "VERBpitch": {
              "value": 0
            },
            "VOL": {
              "value": 29.330708661417354
            },
            "X": {
              "value": 7
            },
            "Y": {
              "value": 127
            },
            "__sps": {
              "TRIG_in": {
                "ARCADE_TRIG": {
                  "value": 0
                }
              }
            },
            "attack": {
              "value": 0
            },
            "attackCUT": {
              "value": 0
            },
            "attackFM": {
              "value": 0
            },
            "colorLES": {
              "value": 0
            },
            "colorTonePHASER": {
              "value": 0
            },
            "decay": {
              "value": 256.9876195092843
            },
            "decayCUT": {
              "value": 30
            },
            "decayFM": {
              "value": 175.5959017429858
            },
            "depthCHOR": {
              "value": 43.30708661417334
            },
            "depthFL": {
              "value": 0
            },
            "depthPH": {
              "value": 0
            },
            "depthVIB": {
              "value": 100
            },
            "detune": {
              "value": 0
            },
            "feedbackFLANGE": {
              "value": 0
            },
            "freezeMIX": {
              "value": 0
            },
            "index1": {
              "value": 1.25984251968507
            },
            "index2": {
              "value": 0.787401574803154
            },
            "index3": {
              "value": 0.4724409448819
            },
            "mixLES": {
              "value": 0
            },
            "octvol": {
              "value": 0
            },
            "oddsTRIG": {
              "value": 14.960629921259795
            },
            "offset": {
              "value": -3
            },
            "rateE": {
              "value": 7.874015748031496
            },
            "ratio1": {
              "value": 0.37007874015748
            },
            "ratio2": {
              "value": 0.78740157480315
            },
            "ratio3": {
              "value": 1.78740157480315
            },
            "release": {
              "value": 157.11410228668706
            },
            "releaseCUT": {
              "value": 5000
            },
            "releaseFM": {
              "value": 754.8210244375733
            },
            "resonance": {
              "value": 0
            },
            "smooth": {
              "value": 33.070866141732246
            },
            "spectralLFO": {
              "value": 0
            },
            "spectralTIME": {
              "value": 1653.543307086614
            },
            "spreadNOTEZ": {
              "value": 7.322834645669296
            },
            "sustain": {
              "value": 0
            },
            "sustainCUT": {
              "value": 1
            },
            "sustainFM": {
              "value": 0
            },
            "transp": {
              "value": 0
            },
            "verbTIME": {
              "value": 66
            }
          },
          "SPECTEREERLALL": {
            "__sps": {
              "Freeze": {},
              "Transp~": {},
              "freezer": [
                {},
                {},
                {},
                {}
              ],
              "freezer[1]": [
                {},
                {},
                {},
                {}
              ]
            },
            "windowSIZE": {
              "value": 200
            }
          },
          "SYNTHESE": [
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            }
          ],
          "TRIG_in": {
            "ARCADE_TRIG": {
              "value": 0
            }
          },
          "VERB": {
            "__sps": {
              "Chorus~": {},
              "Delay~": {},
              "Feedback~": {
                "__sps": {
                  "Gate~": {}
                }
              },
              "Mix~": {},
              "Octave~": {
                "__sps": {
                  "Shift~": {},
                  "Shift~[1]": {}
                }
              },
              "Pitch~": {
                "__sps": {
                  "Shift~": {},
                  "Shift~[1]": {}
                }
              },
              "Reverb~": {
                "__sps": {
                  "Blur~": {},
                  "CombL~": {},
                  "CombR~": {},
                  "Damp~": {},
                  "MapParams": {},
                  "RoomA~": {},
                  "RoomB~": {},
                  "Shuffle~": {}
                }
              },
              "Volumes~": {}
            },
            "chorus": {
              "value": 30
            },
            "damp": {
              "value": 20
            },
            "decay": {
              "value": 85
            },
            "delay": {
              "value": 250
            },
            "diff": {
              "value": 50
            },
            "feedback": {
              "value": 39
            },
            "jitter": {
              "value": 80
            },
            "octdamp": {
              "value": 50
            },
            "pitchvol": {
              "value": 0
            },
            "revvol": {
              "value": 100
            },
            "size": {
              "value": 95
            },
            "window": {
              "value": 250
            }
          },
          "chorus": {
            "__sps": {
              "HiCut~": {},
              "LowCut~": {}
            },
            "spreadCHOR": {
              "value": 100
            }
          },
          "delayy": {
            "__sps": {
              "DelayCalc": {
                "rand": {
                  "value": 0
                }
              },
              "FilterDelay~": {},
              "Input~": {},
              "Mix~": {},
              "TapTempo": {}
            }
          },
          "flanger": {
            "__sps": {
              "HiPass~": {}
            },
            "spreadFL": {
              "value": 100
            }
          },
          "presets": {
            "__sps": {
              "BMO_v1": {
                "1_BMO_v1": {
                  "value": 1
                }
              },
              "startr": {}
            }
          },
          "startrr": {},
          "vibrato": {
            "spreadVIB": {
              "value": 0
            }
          },
          "voice_chance": [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {}
          ]
        }
      }
    },
    {
      "name": "2.BLOOPS",
      "preset": {
        "__sps": {
          "CLEAR_in": {
            "CLEAR": {
              "value": 0
            }
          },
          "DISTORTION": {
            "DISbass": {
              "value": -20
            },
            "DISdrive": {
              "value": 100
            },
            "DIShighcut": {
              "value": 80
            },
            "DISlowcut": {
              "value": 0
            },
            "DISmidfreq": {
              "value": 55
            },
            "DIStreble": {
              "value": 0
            },
            "DISvol": {
              "value": 0
            },
            "__sps": {
              "Drive~": {},
              "Mix~": {},
              "Post-EQ~": {
                "__sps": {
                  "Bass~": {},
                  "Mid~": {},
                  "Treble~": {}
                }
              },
              "Pre-EQ~": {},
              "Volume~": {}
            }
          },
          "FILTER": {},
          "GENtog_in": {
            "genTOG": {
              "value": 1
            }
          },
          "GLITCH_in": {
            "glitchh": {
              "value": 0
            }
          },
          "LFO~": {},
          "MIDI+ENC": {
            "BPM": {
              "value": 306
            },
            "CUTOFF": {
              "value": 20000
            },
            "CUTOFFLFO": {
              "value": 0
            },
            "DELindex": {
              "value": 0
            },
            "DELmix": {
              "value": 0
            },
            "DELregen": {
              "value": 0
            },
            "DELspread": {
              "value": 0
            },
            "DISTlow/high_IN": {
              "value": 0
            },
            "DISTlow/high_PRE": {
              "value": 0
            },
            "DISmid": {
              "value": 0
            },
            "DISmix": {
              "value": 0
            },
            "OSC1offset": {
              "value": -0.08
            },
            "OSC1pan": {
              "value": -1
            },
            "OSC1vol": {
              "value": 35.433070866141726
            },
            "OSC1wave": {
              "value": 1
            },
            "OSC2offset": {
              "value": 0
            },
            "OSC2pan": {
              "value": 0
            },
            "OSC2vol": {
              "value": 43.70078740157479
            },
            "OSC2wave": {
              "value": 1
            },
            "OSC3offset": {
              "value": 0.04
            },
            "OSC3pan": {
              "value": 0
            },
            "OSC3vol": {
              "value": 38.97637795275589
            },
            "OSC3wave": {
              "value": 1
            },
            "PWm": {
              "value": 0
            },
            "VERBmix": {
              "value": 0
            },
            "VERBpitch": {
              "value": 0
            },
            "VOL": {
              "value": 29.330708661417354
            },
            "__sps": {
              "TRIG_in": {
                "ARCADE_TRIG": {
                  "value": 0
                }
              }
            },
            "attack": {
              "value": 0
            },
            "attackCUT": {
              "value": 0
            },
            "attackFM": {
              "value": 0
            },
            "colorLES": {
              "value": 0
            },
            "colorTonePHASER": {
              "value": 0
            },
            "decay": {
              "value": 256.9876195092843
            },
            "decayCUT": {
              "value": 30
            },
            "decayFM": {
              "value": 175.5959017429858
            },
            "depthCHOR": {
              "value": 43.30708661417334
            },
            "depthFL": {
              "value": 0
            },
            "depthPH": {
              "value": 0
            },
            "depthVIB": {
              "value": 100
            },
            "detune": {
              "value": 0
            },
            "feedbackFLANGE": {
              "value": 0
            },
            "freezeMIX": {
              "value": 0
            },
            "index1": {
              "value": 1.25984251968507
            },
            "index2": {
              "value": 0.787401574803154
            },
            "index3": {
              "value": 0.4724409448819
            },
            "mixLES": {
              "value": 0
            },
            "octvol": {
              "value": 0
            },
            "oddsTRIG": {
              "value": 14.960629921259795
            },
            "offset": {
              "value": -3
            },
            "rateE": {
              "value": 7.874015748031496
            },
            "ratio1": {
              "value": 0.37007874015748
            },
            "ratio2": {
              "value": 0.78740157480315
            },
            "ratio3": {
              "value": 1.78740157480315
            },
            "release": {
              "value": 157.11410228668706
            },
            "releaseCUT": {
              "value": 5000
            },
            "releaseFM": {
              "value": 754.8210244375733
            },
            "resonance": {
              "value": 0
            },
            "smooth": {
              "value": 33.070866141732246
            },
            "spectralLFO": {
              "value": 0
            },
            "spectralTIME": {
              "value": 1653.543307086614
            },
            "spreadNOTEZ": {
              "value": 7.322834645669296
            },
            "sustain": {
              "value": 0
            },
            "sustainCUT": {
              "value": 1
            },
            "sustainFM": {
              "value": 0
            },
            "transp": {
              "value": 0
            },
            "verbTIME": {
              "value": 66
            }
          },
          "SPECTEREERLALL": {
            "__sps": {
              "Freeze": {},
              "Transp~": {},
              "freezer": [
                {},
                {},
                {},
                {}
              ],
              "freezer[1]": [
                {},
                {},
                {},
                {}
              ]
            },
            "windowSIZE": {
              "value": 200
            }
          },
          "SYNTHESE": [
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            },
            {
              "__sps": {
                "env_adsr": {},
                "filter_adsr+": {
                  "__sps": {
                    "cutoff_adsr": {}
                  }
                },
                "osc3": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[1]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                },
                "osc3[2]": {
                  "__sps": {
                    "env_adsr": {}
                  }
                }
              }
            }
          ],
          "TRIG_in": {
            "ARCADE_TRIG": {
              "value": 0
            }
          },
          "VERB": {
            "__sps": {
              "Chorus~": {},
              "Delay~": {},
              "Feedback~": {
                "__sps": {
                  "Gate~": {}
                }
              },
              "Mix~": {},
              "Octave~": {
                "__sps": {
                  "Shift~": {},
                  "Shift~[1]": {}
                }
              },
              "Pitch~": {
                "__sps": {
                  "Shift~": {},
                  "Shift~[1]": {}
                }
              },
              "Reverb~": {
                "__sps": {
                  "Blur~": {},
                  "CombL~": {},
                  "CombR~": {},
                  "Damp~": {},
                  "MapParams": {},
                  "RoomA~": {},
                  "RoomB~": {},
                  "Shuffle~": {}
                }
              },
              "Volumes~": {}
            },
            "chorus": {
              "value": 30
            },
            "damp": {
              "value": 20
            },
            "decay": {
              "value": 85
            },
            "delay": {
              "value": 250
            },
            "diff": {
              "value": 50
            },
            "feedback": {
              "value": 39
            },
            "jitter": {
              "value": 80
            },
            "octdamp": {
              "value": 50
            },
            "pitchvol": {
              "value": 0
            },
            "revvol": {
              "value": 100
            },
            "size": {
              "value": 95
            },
            "window": {
              "value": 250
            }
          },
          "chorus": {
            "__sps": {
              "HiCut~": {},
              "LowCut~": {}
            },
            "spreadCHOR": {
              "value": 100
            }
          },
          "delayy": {
            "__sps": {
              "DelayCalc": {
                "rand": {
                  "value": 0
                }
              },
              "FilterDelay~": {},
              "Input~": {},
              "Mix~": {},
              "TapTempo": {}
            }
          },
          "flanger": {
            "__sps": {
              "HiPass~": {}
            },
            "spreadFL": {
              "value": 100
            }
          },
          "presets": {
            "__sps": {
              "BMO_v1": {
                "1_BMO_v1": {
                  "value": 1
                }
              },
              "startr": {}
            }
          },
          "startrr": {},
          "vibrato": {
            "spreadVIB": {
              "value": 0
            }
          },
          "voice_chance": [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {}
          ]
        }
      }
    },
    {
      "name": "untitled",
      "preset": {}
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}